package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"math"
	"os"
	"path"
	"strconv"
	"sync"
	"time"

	"github.com/Unknwon/com"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
)

// GitHash githash
var GitHash = "No GitHash Provided."

// BuildStamp BuildStamp
var BuildStamp = "No BuildStamp Provided."

// Exploit ..
type Exploit struct {
	ID          uint      `json:"id"`
	File        string    `json:"file"`
	Description string    `json:"description"`
	Date        time.Time `json:"date"`
	Author      string    `json:"author"`
	Platform    string    `json:"platform"`
	Type        string    `json:"type"`
	Port        uint      `json:"port"`
}

const releaseDir = "./dist"

var wg sync.WaitGroup
var err error
var db *gorm.DB

func main() {
	fmt.Printf("App Build Git Commit Hash: %s\n", GitHash)
	fmt.Printf("UTC Build Time: %s\n", BuildStamp)

	if com.IsDir(releaseDir) {
		os.RemoveAll(releaseDir)
	}
	os.Mkdir(releaseDir, 0755)

	db, err = gorm.Open("sqlite3", "exploit.db")
	if err != nil {
		log.Println(err)
	}
	db.AutoMigrate(&Exploit{})
	db.LogMode(true)

	type Detail struct {
		Name string `json:"name"`
		Type string `json:"type"`
		Page int    `json:"page"`
	}
	details := []Detail{}
	channel := make(chan Detail, 1)
	ctx, ctxCancel := context.WithCancel(context.Background())
	go func() {
		for {
			select {
			case d := <-channel:
				details = append(details, d)
			case <-ctx.Done():
				return
			}
		}
	}()
	var count int
	db.Model(&Exploit{}).Count(&count)
	details = append(details, Detail{Name: "all", Type: "all", Page: count})

	type Platform struct {
		Platform string
	}
	var plat []Platform
	db.Raw("SELECT DISTINCT(platform) AS platform FROM exploits").Scan(&plat)
	for _, i := range plat {
		wg.Add(1)
		go func(plat string) {
			currReleaseDir := path.Join(releaseDir, plat)
			os.Mkdir(currReleaseDir, 0755)
			var c int
			db.Model(&Exploit{}).Where(&Exploit{Platform: plat}).Count(&c)
			channel <- Detail{Name: plat, Type: "platform", Page: c}
			for i := 0; i < int(math.Ceil(float64(c)/50)); i++ {
				var exploit []Exploit
				db.Model(&Exploit{}).Where(&Exploit{Platform: plat}).Order("date desc").Offset(i * 50).Limit(50).Scan(&exploit)
				b, _ := json.Marshal(exploit)
				ioutil.WriteFile(path.Join(currReleaseDir, strconv.Itoa(i)+".json"), b, 0644)
			}
			defer wg.Done()
		}(i.Platform)
	}

	type Type struct {
		Type string
	}
	var types []Type
	db.Raw("SELECT DISTINCT(type) AS type FROM exploits").Scan(&types)
	for _, i := range types {
		wg.Add(1)
		go func(ty string) {
			currReleaseDir := path.Join(releaseDir, ty)
			os.Mkdir(currReleaseDir, 0755)
			var c int
			db.Model(&Exploit{}).Where(&Exploit{Type: ty}).Count(&c)
			channel <- Detail{Name: ty, Type: "type", Page: c}
			for i := 0; i < int(math.Ceil(float64(c)/50)); i++ {
				var exploit []Exploit
				db.Model(&Exploit{}).Where(&Exploit{Type: ty}).Order("date desc").Offset(i * 50).Limit(50).Scan(&exploit)
				b, _ := json.Marshal(exploit)
				ioutil.WriteFile(path.Join(currReleaseDir, strconv.Itoa(i)+".json"), b, 0644)
			}
			defer wg.Done()
		}(i.Type)
	}

	wg.Wait()
	ctxCancel()

	b, _ := json.Marshal(details)
	ioutil.WriteFile("exploit.json", b, 0644)
}
